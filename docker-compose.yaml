services:
  web:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - api

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - api

  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_PORT=${DB_PORT}
      - TEST_POSTGRES_USER=${TEST_DB_USER}
      - TEST_POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
      - TEST_POSTGRES_DB=${TEST_DB_NAME}
      - TEST_POSTGRES_HOST=${TEST_DB_HOST}
      - TEST_POSTGRES_PORT=${TEST_DB_PORT}
    depends_on:
      - db
    networks:
      - postgres

  db:
    image: postgres:16.4-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST=${DB_HOST}
    ports:
      - '1234:5432'
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    networks:
      - postgres

  db_test:
    image: postgres:16.4-alpine
    container_name: db_test_container
    environment:
      - POSTGRES_USER=${TEST_DB_USER}
      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
      - POSTGRES_DB=${TEST_DB_NAME}
      - POSTGRES_HOST=${TEST_DB_HOST}
    ports:
      - '4568:5432'
    volumes:
      - ./pg_data_test:/var/lib/postgresql/data
    networks:
      - postgres

volumes:
  pg_data:
  pg_data_test:

    # Networks to be created to facilitate communication between containers
networks:
  postgres:
    driver: bridge
